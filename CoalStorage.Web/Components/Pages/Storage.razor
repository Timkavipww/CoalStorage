@page "/"
@inject IStorageRepository _context

<body>
    <div>
    <table>
        <thead>
            <tr>
                <th scope="col">Номер склада</th>
                <th scope="col">Номер площадки</th>
                <th scope="col">Номера Пикетов</th>
                <th scope="col">Груз на площадке (т)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var storage in Storages ?? Enumerable.Empty<MainStorage>())
            {
                foreach (var area in storage.Areas ?? Enumerable.Empty<Area>())
                {
                    <tr>
                        <td>@storage.StorageName</td>
                        <td>@area.AreaName</td>
                        <td>@(string.Join(",", ConvertToRanges(area.Pickets?.Select(p => p.PicketName) ?? Enumerable.Empty<long>())))</td>
                        <td>@(area.Pickets?.Sum(p => p.Load) ?? 0)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
        
    </div>
    <div>
        <div>
        <button class="btn-dark shadow-sm h-5 text-body=ADD m-2 w-auto" @onclick="() => AddStorageNEW(1)">
            Добавить склад
        </button>
            <div class="top-row px-4">
                <a href="/counter" target="_blank">About</a>
            </div>
        </div>

        <button class="btn-dark  shadow-sm h-5 text-body=ADD w-auto ">
            Добавить Площадку
        </button>
        <button class="btn-dark  shadow-sm h-5 text-body=ADD w-auto">
            Добавить Пикет
        </button>
        <button class="btn-dark  shadow-sm h-5  text-body=ADD w-auto">
            Объеденить пикеты
        </button>
    </div>
</body>
<link href="~/bootstrap/styles.css" rel="stylesheet" />


@code {

    private void AddStorageNEW(int num)
    {
        Console.WriteLine(string.Join("m", num));
    }


    public List<MainStorage> Storages;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            
            Storages = await _context.GetAllStoragesAsync() ?? new List<MainStorage>();
            Console.WriteLine("Storages загружены успешно.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading storages: {ex.Message}");
            Storages = new List<MainStorage>();
        }
    }
 
    private string checkedMessage = "Not changed yet";


    private void CheckChanged() => checkedMessage = $"Last change {DateTime.Now}";

    private void WriteToConsole()
    {
       Console.WriteLine("ALO");
    }

    

    private IEnumerable<string> ConvertToRanges(IEnumerable<long> numbers)
    {
        if (numbers == null || !numbers.Any())
            return Enumerable.Empty<string>();

        var sortedNumbers = numbers.OrderBy(n => n).ToList();
        var ranges = new List<string>();
        int start = (int)sortedNumbers[0], end = (int)sortedNumbers[0];

        for (int i = 1; i < sortedNumbers.Count; i++)
        {
            if (sortedNumbers[i] == end + 1)
            {
                end = (int)sortedNumbers[i];
            }
            else
            {
                ranges.Add(start == end ? $"{start}" : $"{start}-{end}");
                start = end = (int)sortedNumbers[i];
            }
        }

        ranges.Add(start == end ? $"{start}" : $"{start}-{end}");
        return ranges;
    }
}

// <auto-generated />
using System;
using CoalStorage.Inftastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoalStorage.Inftastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoalStorage.Core.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MainStorageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainStorageId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.MainStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.Picket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Area")
                        .HasColumnType("integer");

                    b.Property<int?>("AreaId")
                        .HasColumnType("integer");

                    b.Property<int?>("MainStorageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("MainStorageId");

                    b.ToTable("Pickets");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.PicketArea", b =>
                {
                    b.Property<int>("PicketID")
                        .HasColumnType("integer");

                    b.Property<int>("AreaID")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("PicketID", "AreaID");

                    b.HasIndex("AreaID");

                    b.ToTable("PicketAreas");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.StoragePicket", b =>
                {
                    b.Property<int>("StorageID")
                        .HasColumnType("integer");

                    b.Property<int>("PicketID")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("StorageID", "PicketID");

                    b.HasIndex("PicketID");

                    b.ToTable("StoragePickets");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.Area", b =>
                {
                    b.HasOne("CoalStorage.Core.Entities.MainStorage", null)
                        .WithMany("Areas")
                        .HasForeignKey("MainStorageId");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.Picket", b =>
                {
                    b.HasOne("CoalStorage.Core.Entities.Area", null)
                        .WithMany("Pickets")
                        .HasForeignKey("AreaId");

                    b.HasOne("CoalStorage.Core.Entities.MainStorage", null)
                        .WithMany("Pickets")
                        .HasForeignKey("MainStorageId");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.PicketArea", b =>
                {
                    b.HasOne("CoalStorage.Core.Entities.Area", "Area")
                        .WithMany("PicketAreas")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoalStorage.Core.Entities.Picket", "Picket")
                        .WithMany("PicketAreas")
                        .HasForeignKey("PicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Picket");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.StoragePicket", b =>
                {
                    b.HasOne("CoalStorage.Core.Entities.Picket", "Picket")
                        .WithMany("StoragePickets")
                        .HasForeignKey("PicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoalStorage.Core.Entities.MainStorage", "MainStorage")
                        .WithMany("StoragePickets")
                        .HasForeignKey("StorageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainStorage");

                    b.Navigation("Picket");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.Area", b =>
                {
                    b.Navigation("PicketAreas");

                    b.Navigation("Pickets");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.MainStorage", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Pickets");

                    b.Navigation("StoragePickets");
                });

            modelBuilder.Entity("CoalStorage.Core.Entities.Picket", b =>
                {
                    b.Navigation("PicketAreas");

                    b.Navigation("StoragePickets");
                });
#pragma warning restore 612, 618
        }
    }
}
